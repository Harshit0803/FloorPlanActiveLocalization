// Generated by gencpp from file sem_cloud/nodes.msg
// DO NOT EDIT!


#ifndef SEM_CLOUD_MESSAGE_NODES_H
#define SEM_CLOUD_MESSAGE_NODES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace sem_cloud
{
template <class ContainerAllocator>
struct nodes_
{
  typedef nodes_<ContainerAllocator> Type;

  nodes_()
    : posesId()
    , poses()  {
    }
  nodes_(const ContainerAllocator& _alloc)
    : posesId(_alloc)
    , poses(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _posesId_type;
  _posesId_type posesId;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Pose_<ContainerAllocator> >> _poses_type;
  _poses_type poses;





  typedef boost::shared_ptr< ::sem_cloud::nodes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sem_cloud::nodes_<ContainerAllocator> const> ConstPtr;

}; // struct nodes_

typedef ::sem_cloud::nodes_<std::allocator<void> > nodes;

typedef boost::shared_ptr< ::sem_cloud::nodes > nodesPtr;
typedef boost::shared_ptr< ::sem_cloud::nodes const> nodesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sem_cloud::nodes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sem_cloud::nodes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sem_cloud::nodes_<ContainerAllocator1> & lhs, const ::sem_cloud::nodes_<ContainerAllocator2> & rhs)
{
  return lhs.posesId == rhs.posesId &&
    lhs.poses == rhs.poses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sem_cloud::nodes_<ContainerAllocator1> & lhs, const ::sem_cloud::nodes_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sem_cloud

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sem_cloud::nodes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sem_cloud::nodes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sem_cloud::nodes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sem_cloud::nodes_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sem_cloud::nodes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sem_cloud::nodes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sem_cloud::nodes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0aa0e2793de02d3b5e7aa2ce56d2f367";
  }

  static const char* value(const ::sem_cloud::nodes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0aa0e2793de02d3bULL;
  static const uint64_t static_value2 = 0x5e7aa2ce56d2f367ULL;
};

template<class ContainerAllocator>
struct DataType< ::sem_cloud::nodes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sem_cloud/nodes";
  }

  static const char* value(const ::sem_cloud::nodes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sem_cloud::nodes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] posesId\n"
"geometry_msgs/Pose[] poses\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::sem_cloud::nodes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sem_cloud::nodes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.posesId);
      stream.next(m.poses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct nodes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sem_cloud::nodes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sem_cloud::nodes_<ContainerAllocator>& v)
  {
    s << indent << "posesId[]" << std::endl;
    for (size_t i = 0; i < v.posesId.size(); ++i)
    {
      s << indent << "  posesId[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.posesId[i]);
    }
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEM_CLOUD_MESSAGE_NODES_H
