// Generated by gencpp from file sem_cloud/topParticle.msg
// DO NOT EDIT!


#ifndef SEM_CLOUD_MESSAGE_TOPPARTICLE_H
#define SEM_CLOUD_MESSAGE_TOPPARTICLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sem_cloud
{
template <class ContainerAllocator>
struct topParticle_
{
  typedef topParticle_<ContainerAllocator> Type;

  topParticle_()
    : doors(0)
    , walls(0)
    , x(0.0)
    , y(0.0)
    , h(0.0)
    , time(0.0)  {
    }
  topParticle_(const ContainerAllocator& _alloc)
    : doors(0)
    , walls(0)
    , x(0.0)
    , y(0.0)
    , h(0.0)
    , time(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _doors_type;
  _doors_type doors;

   typedef uint32_t _walls_type;
  _walls_type walls;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _h_type;
  _h_type h;

   typedef float _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::sem_cloud::topParticle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sem_cloud::topParticle_<ContainerAllocator> const> ConstPtr;

}; // struct topParticle_

typedef ::sem_cloud::topParticle_<std::allocator<void> > topParticle;

typedef boost::shared_ptr< ::sem_cloud::topParticle > topParticlePtr;
typedef boost::shared_ptr< ::sem_cloud::topParticle const> topParticleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sem_cloud::topParticle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sem_cloud::topParticle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sem_cloud::topParticle_<ContainerAllocator1> & lhs, const ::sem_cloud::topParticle_<ContainerAllocator2> & rhs)
{
  return lhs.doors == rhs.doors &&
    lhs.walls == rhs.walls &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.h == rhs.h &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sem_cloud::topParticle_<ContainerAllocator1> & lhs, const ::sem_cloud::topParticle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sem_cloud

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sem_cloud::topParticle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sem_cloud::topParticle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sem_cloud::topParticle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sem_cloud::topParticle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sem_cloud::topParticle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sem_cloud::topParticle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sem_cloud::topParticle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "458584feb3127cec71be9da0019fd243";
  }

  static const char* value(const ::sem_cloud::topParticle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x458584feb3127cecULL;
  static const uint64_t static_value2 = 0x71be9da0019fd243ULL;
};

template<class ContainerAllocator>
struct DataType< ::sem_cloud::topParticle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sem_cloud/topParticle";
  }

  static const char* value(const ::sem_cloud::topParticle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sem_cloud::topParticle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 doors\n"
"uint32 walls\n"
"float32 x\n"
"float32 y\n"
"float32 h\n"
"float32 time\n"
;
  }

  static const char* value(const ::sem_cloud::topParticle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sem_cloud::topParticle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.doors);
      stream.next(m.walls);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.h);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct topParticle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sem_cloud::topParticle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sem_cloud::topParticle_<ContainerAllocator>& v)
  {
    s << indent << "doors: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.doors);
    s << indent << "walls: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.walls);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "h: ";
    Printer<float>::stream(s, indent + "  ", v.h);
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEM_CLOUD_MESSAGE_TOPPARTICLE_H
